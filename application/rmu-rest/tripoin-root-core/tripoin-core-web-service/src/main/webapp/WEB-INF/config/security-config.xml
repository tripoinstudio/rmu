<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:security="http://www.springframework.org/schema/security"
    xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.0.4.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd">
    
	<security:global-method-security secured-annotations="enabled" />
	
	<bean id="bad-credential" class="com.tripoin.core.rest.json.exception.JSONBadCredentialHandler">
		<property name="realmName" value="This page required user credential"/>
	</bean>
	
	<bean id="access-denied" class="com.tripoin.core.rest.json.exception.JSONAccessDeniedHandler"/>
	
	<!-- Configure Spring Security -->
	<security:http auto-config="true" use-expressions="true" realm="REST HTTP Web Service" create-session="never">
		<security:access-denied-handler ref="access-denied"/>
		<security:http-basic entry-point-ref="bad-credential"/>	
		<security:intercept-url pattern='/apk/*' access="hasAnyRole('ROLE_WAITRESS', 'ROLE_TRAIN', 'ROLE_DEFAULT')"  />
		<security:intercept-url pattern='/images/*' access="hasAnyRole('ROLE_WAITRESS', 'ROLE_TRAIN', 'ROLE_DEFAULT')"  />
		<security:intercept-url pattern='/wscontext/*' access="hasAnyRole('ROLE_WAITRESS', 'ROLE_TRAIN', 'ROLE_DEFAULT')"  />		
	</security:http>
	
	
	<!--  In this example, we are using in memory authentication. The password encoder depends on 
					Jasypt's String Digester to digest the password stored in users.properties -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider>
			<security:password-encoder ref="passwordEncoder"/>
			<security:jdbc-user-service data-source-ref="dataSource"
                    users-by-username-query="SELECT user_code AS username, user_password AS password, user_enabled AS enabled FROM security_user WHERE user_code = ?"
                    authorities-by-username-query="SELECT security_user.user_code AS username, security_role.role_code AS role FROM security_user,security_role
                      WHERE security_user.user_code = ? AND security_user.role_id = security_role.role_id" />
		</security:authentication-provider>
	</security:authentication-manager>

	<!--
        Use the StringDigester to create uni-directional password encryption.
        All uni-directional encryption methods supported in jasypt is integrated into
        Spring Security
    -->
    <bean id="jasyptStringDigester" class="org.jasypt.digest.StandardStringDigester" >
        <property name="algorithm" value="SHA-1" />
        <property name="iterations" value="100000" />
        <property name="saltGenerator">
            <bean id="zeroSaltGenerator" class="org.jasypt.salt.ZeroSaltGenerator"/>
        </property>
        <property name="saltSizeBytes" value="10"/>
    </bean>
    
    <!--
         This Spring Security-friendly PasswordEncoder implementation will
           wrap the StringDigester instance so that it can be used from
           the security framework.
       -->
    <bean id="passwordEncoder" class="org.jasypt.spring.security3.PasswordEncoder">
        <property name="stringDigester" ref="jasyptStringDigester"/>
    </bean>
</beans>